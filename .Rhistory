col <- sort(log(map_data_all$sumcases))
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat,fill=id, group = group), fill="grey") +
geom_point(data=map_data_all, aes(x=lng, y=lat,size=log10(sumcases), color=col,stroke=F)) +
scale_colour_gradient(high="red",low="yellow")
col <- sort(log(map_data_all$sumcases))
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat,fill=id, group = group), fill="grey") +
geom_point(data=map_data_all, aes(x=lng, y=lat,size=log10(sumcases), color=-col,stroke=F)) +
scale_colour_gradient(high="red",low="yellow")
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat,fill=id, group = group), fill="grey") +
geom_point(data=map_data_all, aes(x=lng, y=lat,size=log10(sumcases), color=-col,stroke=F)) +
scale_colour_gradient(high="blue",low="yellow")
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat,fill=id, group = group), fill="grey") +
geom_point(data=map_data_all, aes(x=lng, y=lat,size=log10(sumcases), color=-colour,stroke=F)) +
scale_colour_gradient(high="red",low="yellow")
colour <- sort(log(map_data_all$sumcases))
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat,fill=id, group = group), fill="grey") +
geom_point(data=map_data_all, aes(x=lng, y=lat,size=log10(sumcases), color=-colour,stroke=F)) +
scale_colour_gradient(high="red",low="yellow")
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat,fill=id, group = group), fill="grey") +
geom_point(data=map_data_all, aes(x=lng, y=lat,size=log10(sumcases), color=-colour,stroke=F)) +
scale_colour_gradient(high="red",low="yellow")
# for (i in 1:nrow(map_data_all)){annotate("text",x =map_data_all$lat, y =map_data_all$lng, label = map_data_all$country,size= 3 )} +
#geom_text(aes(label = world_cities), size = 4) +
#scale_size_continuous(name="Cases", range=c(1,7),breaks=mybreaks, labels = c("1-999", "1,000-9,999", "10,000+")) +
# scale_alpha_continuous(name="Cases", trans="log", range=c(0.1, 0.9),breaks=mybreaks) +
#scale_color_viridis_c(option="inferno",name="Cases", trans="log", breaks=mybreaks, labels = c("1-999",  "1,000-9,999", "10,000+")) +
theme_void()+
#guides( colour = guide_legend(),fill = FALSE)+
# labs(caption = "The number of cumulatative cases used in the model.") +
theme(
legend.position = "right",
text = element_text(color = "black"),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.background = element_rect(fill = "#ffffff", color = NA),
legend.background = element_rect(fill = "#ffffff", color = NA)
)
transmission <- -sort(log(map_data_all$sumcases))
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat,fill=id, group = group), fill="grey") +
geom_point(data=map_data_all, aes(x=lng, y=lat,size=log10(sumcases), color=transmission,stroke=F)) +
scale_colour_gradient(high="red",low="yellow")
# for (i in 1:nrow(map_data_all)){annotate("text",x =map_data_all$lat, y =map_data_all$lng, label = map_data_all$country,size= 3 )} +
#geom_text(aes(label = world_cities), size = 4) +
#scale_size_continuous(name="Cases", range=c(1,7),breaks=mybreaks, labels = c("1-999", "1,000-9,999", "10,000+")) +
# scale_alpha_continuous(name="Cases", trans="log", range=c(0.1, 0.9),breaks=mybreaks) +
#scale_color_viridis_c(option="inferno",name="Cases", trans="log", breaks=mybreaks, labels = c("1-999",  "1,000-9,999", "10,000+")) +
theme_void()+
#guides( colour = guide_legend(),fill = FALSE)+
# labs(caption = "The number of cumulatative cases used in the model.") +
theme(
legend.position = "right",
text = element_text(color = "black"),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.background = element_rect(fill = "#ffffff", color = NA),
legend.background = element_rect(fill = "#ffffff", color = NA)
)
transmission <- -sort(log(map_data_all$sumcases))
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat,fill=id, group = group), fill="grey") +
geom_point(data=map_data_all, aes(x=lng, y=lat,size=log10(sumcases), color=transmission,stroke=F)) +
scale_colour_gradient(high="dark red",low="yellow")
# for (i in 1:nrow(map_data_all)){annotate("text",x =map_data_all$lat, y =map_data_all$lng, label = map_data_all$country,size= 3 )} +
#geom_text(aes(label = world_cities), size = 4) +
#scale_size_continuous(name="Cases", range=c(1,7),breaks=mybreaks, labels = c("1-999", "1,000-9,999", "10,000+")) +
# scale_alpha_continuous(name="Cases", trans="log", range=c(0.1, 0.9),breaks=mybreaks) +
#scale_color_viridis_c(option="inferno",name="Cases", trans="log", breaks=mybreaks, labels = c("1-999",  "1,000-9,999", "10,000+")) +
theme_void()+
#guides( colour = guide_legend(),fill = FALSE)+
# labs(caption = "The number of cumulatative cases used in the model.") +
theme(
legend.position = "right",
text = element_text(color = "black"),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.background = element_rect(fill = "#ffffff", color = NA),
legend.background = element_rect(fill = "#ffffff", color = NA)
)
transmission <- sort(log(map_data_all$sumcases))
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat,fill=id, group = group), fill="grey") +
geom_point(data=map_data_all, aes(x=lng, y=lat,size=log10(sumcases), color=transmission,stroke=F)) +
scale_colour_gradient(high="dark red",low="yellow")
transmission <- -sort(log(map_data_all$sumcases))
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat,fill=id, group = group), fill="grey") +
geom_point(data=map_data_all, aes(x=lng, y=lat,size=log10(sumcases), color=transmission,stroke=F)) +
scale_colour_gradient(high="dark red",low="yellow")
-log10(sumcases) <- sort(log(map_data_all$sumcases))
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat,fill=id, group = group), fill="grey") +
geom_point(data=map_data_all, aes(x=lng, y=lat,size=-log10(sumcases), color=transmission,stroke=F)) +
scale_colour_gradient(high="dark red",low="yellow")
# for (i in 1:nrow(map_data_all)){annotate("text",x =map_data_all$lat, y =map_data_all$lng, label = map_data_all$country,size= 3 )} +
#geom_text(aes(label = world_cities), size = 4) +
#scale_size_continuous(name="Cases", range=c(1,7),breaks=mybreaks, labels = c("1-999", "1,000-9,999", "10,000+")) +
# scale_alpha_continuous(name="Cases", trans="log", range=c(0.1, 0.9),breaks=mybreaks) +
#scale_color_viridis_c(option="inferno",name="Cases", trans="log", breaks=mybreaks, labels = c("1-999",  "1,000-9,999", "10,000+")) +
theme_void()+
#guides( colour = guide_legend(),fill = FALSE)+
# labs(caption = "The number of cumulatative cases used in the model.") +
theme(
legend.position = "right",
text = element_text(color = "black"),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.background = element_rect(fill = "#ffffff", color = NA),
legend.background = element_rect(fill = "#ffffff", color = NA)
)
-log10(sumcases) <- sort(log(map_data_all$sumcases))
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat,fill=id, group = group), fill="grey") +
geom_point(data=map_data_all, aes(x=lng, y=lat,size=log10(sumcases), color=-log10(sumcases) ,stroke=F)) +
scale_colour_gradient(high="dark red",low="yellow")
# for (i in 1:nrow(map_data_all)){annotate("text",x =map_data_all$lat, y =map_data_all$lng, label = map_data_all$country,size= 3 )} +
#geom_text(aes(label = world_cities), size = 4) +
#scale_size_continuous(name="Cases", range=c(1,7),breaks=mybreaks, labels = c("1-999", "1,000-9,999", "10,000+")) +
# scale_alpha_continuous(name="Cases", trans="log", range=c(0.1, 0.9),breaks=mybreaks) +
#scale_color_viridis_c(option="inferno",name="Cases", trans="log", breaks=mybreaks, labels = c("1-999",  "1,000-9,999", "10,000+")) +
theme_void()+
#guides( colour = guide_legend(),fill = FALSE)+
# labs(caption = "The number of cumulatative cases used in the model.") +
theme(
legend.position = "right",
text = element_text(color = "black"),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.background = element_rect(fill = "#ffffff", color = NA),
legend.background = element_rect(fill = "#ffffff", color = NA)
)
log10(sumcases) <- sort(log(map_data_all$sumcases))
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat,fill=id, group = group), fill="grey") +
geom_point(data=map_data_all, aes(x=lng, y=lat,size=log10(sumcases), color=-log10(sumcases) ,stroke=F)) +
scale_colour_gradient(high="dark red",low="yellow")
# for (i in 1:nrow(map_data_all)){annotate("text",x =map_data_all$lat, y =map_data_all$lng, label = map_data_all$country,size= 3 )} +
#geom_text(aes(label = world_cities), size = 4) +
#scale_size_continuous(name="Cases", range=c(1,7),breaks=mybreaks, labels = c("1-999", "1,000-9,999", "10,000+")) +
# scale_alpha_continuous(name="Cases", trans="log", range=c(0.1, 0.9),breaks=mybreaks) +
#scale_color_viridis_c(option="inferno",name="Cases", trans="log", breaks=mybreaks, labels = c("1-999",  "1,000-9,999", "10,000+")) +
theme_void()+
#guides( colour = guide_legend(),fill = FALSE)+
# labs(caption = "The number of cumulatative cases used in the model.") +
theme(
legend.position = "right",
text = element_text(color = "black"),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.background = element_rect(fill = "#ffffff", color = NA),
legend.background = element_rect(fill = "#ffffff", color = NA)
)
log10(sumcases) <- -sort(log(map_data_all$sumcases))
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat,fill=id, group = group), fill="grey") +
geom_point(data=map_data_all, aes(x=lng, y=lat,size=log10(sumcases), color=-log10(sumcases) ,stroke=F)) +
scale_colour_gradient(high="dark red",low="yellow")
# for (i in 1:nrow(map_data_all)){annotate("text",x =map_data_all$lat, y =map_data_all$lng, label = map_data_all$country,size= 3 )} +
#geom_text(aes(label = world_cities), size = 4) +
#scale_size_continuous(name="Cases", range=c(1,7),breaks=mybreaks, labels = c("1-999", "1,000-9,999", "10,000+")) +
# scale_alpha_continuous(name="Cases", trans="log", range=c(0.1, 0.9),breaks=mybreaks) +
#scale_color_viridis_c(option="inferno",name="Cases", trans="log", breaks=mybreaks, labels = c("1-999",  "1,000-9,999", "10,000+")) +
theme_void()+
#guides( colour = guide_legend(),fill = FALSE)+
# labs(caption = "The number of cumulatative cases used in the model.") +
theme(
legend.position = "right",
text = element_text(color = "black"),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.background = element_rect(fill = "#ffffff", color = NA),
legend.background = element_rect(fill = "#ffffff", color = NA)
)
log10(sumcases) <- -sort(log(map_data_all$sumcases))
ggplot() +
geom_polygon(data = world, aes(x=long, y = lat,fill=id, group = group), fill="grey") +
geom_point(data=map_data_all, aes(x=lng, y=lat,size=log10(sumcases), color=log10(sumcases) ,stroke=F)) +
scale_colour_gradient(high="dark red",low="yellow")
# for (i in 1:nrow(map_data_all)){annotate("text",x =map_data_all$lat, y =map_data_all$lng, label = map_data_all$country,size= 3 )} +
#geom_text(aes(label = world_cities), size = 4) +
#scale_size_continuous(name="Cases", range=c(1,7),breaks=mybreaks, labels = c("1-999", "1,000-9,999", "10,000+")) +
# scale_alpha_continuous(name="Cases", trans="log", range=c(0.1, 0.9),breaks=mybreaks) +
#scale_color_viridis_c(option="inferno",name="Cases", trans="log", breaks=mybreaks, labels = c("1-999",  "1,000-9,999", "10,000+")) +
theme_void()+
#guides( colour = guide_legend(),fill = FALSE)+
# labs(caption = "The number of cumulatative cases used in the model.") +
theme(
legend.position = "right",
text = element_text(color = "black"),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.background = element_rect(fill = "#ffffff", color = NA),
legend.background = element_rect(fill = "#ffffff", color = NA)
)
plot_sqdays<- ggplot(random_effects, aes(x=factor(Country,level = level_order), Estimate)) +
geom_pointrange(aes(ymin = Estimate - 1.96*SE, ymax = Estimate + 1.96*SE),color="darkblue") +
geom_hline(yintercept=0,color = "red") + coord_flip() +
theme_bw(base_size=10)+
labs(y = "Random effects of quadratic days", x=NULL)+
theme(
axis.title.x = element_text(color = "black", size = 12, face = "bold"),
axis.title.y = element_text(color = "black", size = 12, face = "bold")
)
mu_spatioLevel_sqdays <- as.data.frame(rep_random[rownames(rep_random)=="mu_spatioLevel_sqdays",])
rownames(mu_spatioLevel_sqdays) <- unique(tmb_scale_pweek$spatioLevelfactor)
colnames(mu_spatioLevel_sqdays) <- c("Estimate", "SE")
mu_spatioLevel_sqdays$Country <- rownames(mu_spatioLevel_sqdays)
random_effects <- mu_spatioLevel_sqdays %>%
arrange(Estimate)  %>%
mutate(Country = as.character(Country))
level_order <- random_effects$Country #this vector is used for reorder the countries according to the effect sizes
#ggplot
plot_sqdays<- ggplot(random_effects, aes(x=factor(Country,level = level_order), Estimate)) +
geom_pointrange(aes(ymin = Estimate - 1.96*SE, ymax = Estimate + 1.96*SE),color="darkblue") +
geom_hline(yintercept=0,color = "red") + coord_flip() +
theme_bw(base_size=10)+
labs(y = "Random effects of quadratic days", x=NULL)+
theme(
axis.title.x = element_text(color = "black", size = 12, face = "bold"),
axis.title.y = element_text(color = "black", size = 12, face = "bold")
)
plot_sqdays
ggplot(random_effects, aes(x=factor(Country,level = level_order), Estimate)) +
geom_pointrange(aes(ymin = Estimate - 1.96*SE, ymax = Estimate + 1.96*SE),color="darkblue") +
geom_hline(yintercept=0,color = "red") + coord_flip() +
theme_bw(base_size=10)+
labs(y = "Random effects of quadratic days", x="Country")+
theme(
axis.title.x = element_text(color = "black", size = 12, face = "bold"),
axis.title.y = element_text(color = "black", size = 12, face = "bold")
)
random_slop_mobility <- as.data.frame(rep_value[rownames(rep_value)=="beta_mobility+mu_spatioLevel_mobility",])
random_slop_mobility$Estimate[order(random_slop_mobility$Estimate)]
# Convert the random effects data into a dataframe that can be fed to ggplot
random_slop_mobility <- as.data.frame(rep_random[rownames(rep_random)=="mu_spatioLevel_mobility",])
rownames(random_slop_mobility) <- unique(tmb_scale_pweek$spatioLevelfactor)
colnames(random_slop_mobility) <- c("Estimate", "SE")
random_slop_mobility$Country <- rownames(random_slop_mobility)
#
#beta_mobility_fixed <- rep_fixed["beta_mobility","Estimate"]
random_slops <- random_slop_mobility %>%
#mutate(Estimate = Estimate + beta_mobility_fixed) %>%
arrange(Estimate)  %>%
mutate(Country = as.character(Country))
#
level_order <-random_slops$Country #this vector is used for reorder the countries according to the effect sizes
#
#ggplot
plot_random_mobility <- ggplot(random_slops, aes(x=factor(Country,level = level_order), Estimate)) +
geom_pointrange(aes(ymin = Estimate - 1.96*SE, ymax = Estimate + SE),color="darkblue") +
geom_hline(yintercept=0,color = "red")  + coord_flip() +
theme_bw(base_size=10)+
labs(y = "Random effects of population mobility", x = NULL)+
theme(
axis.title.x = element_text(color = "black", size = 12, face = "bold"),
axis.title.y = element_text(color = "black", size = 12, face = "bold")
)
plot_random_mobility
library(plotrix)
par(mar=c(0.1,1.2,2.2,2), oma=c(-2, -2, 1, 1),mgp=c(3,0.4,0))
# browser data without "ymax" and "ymin"
browsers <-
structure(
list(
browser = structure(
c(1L,1L,2L,2L,3L,3L,3L,3L,4L,4L),
.Label = c("Climate", "Demography", "Disease control", "Time"),
class = "factor"
),
version = structure(
c(1L,2L, 3L, 4L,5L,
6L, 7L, 8L,9L,10L),
# c(1L, 1L, 2L, 2L, 3L,
#   3L, 3L, 4L, 4L,4L,5L),
.Label = c(
"UV radiation",
"Temperature",
"Population",
"Medium age",
"New tests",
"Population mobility",
paste("Contact","tracing", sep = "\n"),
paste("Debt","relief", sep = "\n"),
"Days since first case",
paste("No. of cases","in previous week", sep = "\n")
),
class = "factor"
),
share = c( 0.87,0.2, 0.4, 0.19, 0.34, 3.4, 0.5, 0.3, 2.4,13 )
),
.Names = c("parent", "node", "size")
,
row.names = c(NA,-12L),
class = "data.frame"
)
# aggregate data for the browser pie chart
browser_data <-
aggregate(browsers$size,
by = list(browser = browsers$parent),
FUN = sum)
# order version data by browser so it will line up with browser pie chart
version_data <- browsers[order(browsers$node), ]
browser_colors <- c("#b3e773", '#e7e273', '#7ce9e3',"aquamarine3")
# adjust these as desired (currently colors all versions the same as browser)
version_colors <-
c(
"#b3e773",
"#b3e773",
'#e7e273',
'#e7e273',
'#7ce9e3',
'#7ce9e3',
'#7ce9e3',
'#7ce9e3',
"aquamarine3",
"aquamarine3"
)
# format labels to display version and % market share
version_labels <- paste(version_data$node, paste(version_data$size, "%"), sep = "\n")
# coordinates for the center of the chart
center_x <- 0.5
center_y <- 0.5
plot.new()
# draw version pie chart first
version_chart <-
floating.pie(
xpos = center_x,
ypos = center_y,
x = version_data$size,
radius = 0.35,
border = "white",
col = version_colors
)
# add labels for version pie chart
pie.labels(
x = center_x,
y = center_y,
angles = version_chart,
labels = version_labels,
radius = 0.38,
bg = NULL,
cex = 0.55,
font = 2,
col = "gray40"
)
# overlay browser pie chart
browser_chart <-
floating.pie(
xpos = center_x,
ypos = center_y,
x = browser_data$x,
radius = 0.25,
border = "white",
col = browser_colors
)
paste(browser_data$browser,browser_data$x, sep = " ")
# add labels for browser pie chart
pie.labels(
x = center_x,
y = center_y,
angles = browser_chart,
labels = paste(browser_data$browser,paste(browser_data$x,"%"), sep = "\n"),
radius = 0.125,
bg = NULL,
cex = 0.65,
font = 2,
col = "black"
)
title(main="Variance decomposition for fixed effects",line=-2)
#plot the pie chart for the fixed effects
library(plotrix)
par(mar=c(0.1,1.2,2.2,2), oma=c(-2, -2, 1, 1),mgp=c(3,0.4,0))
# browser data without "ymax" and "ymin"
browsers <-
structure(
list(
browser = structure(
c(1L,1L,2L,2L,3L,3L,3L,3L,4L,4L),
.Label = c("Climate", "Demography", "Disease control", "Time"),
class = "factor"
),
version = structure(
c(1L,2L, 3L, 4L,5L,
6L, 7L, 8L,9L,10L),
# c(1L, 1L, 2L, 2L, 3L,
#   3L, 3L, 4L, 4L,4L,5L),
.Label = c(
"UV radiation",
"Temperature",
"Population",
"Medium age",
"New tests",
"Population mobility",
paste("Contact","tracing", sep = "\n"),
paste("Debt","relief", sep = "\n"),
"Days since first case",
paste("No. of cases","in previous week", sep = "\n")
),
class = "factor"
),
share = c( 0.87,0.2, 0.4, 0.19, 0.34, 3.4, 0.5, 0.3, 2.4,13 )
),
.Names = c("parent", "node", "size")
,
row.names = c(NA,-12L),
class = "data.frame"
)
# aggregate data for the browser pie chart
browser_data <-
aggregate(browsers$size,
by = list(browser = browsers$parent),
FUN = sum)
# order version data by browser so it will line up with browser pie chart
version_data <- browsers[order(browsers$node), ]
browser_colors <- c("#b3e773", '#e7e273', '#7ce9e3',"aquamarine3")
# adjust these as desired (currently colors all versions the same as browser)
version_colors <-
c(
"#b3e773",
"#b3e773",
'#e7e273',
'#e7e273',
'#7ce9e3',
'#7ce9e3',
'#7ce9e3',
'#7ce9e3',
"aquamarine3",
"aquamarine3"
)
# format labels to display version and % market share
version_labels <- paste(version_data$node, paste(version_data$size, "%"), sep = "\n")
# coordinates for the center of the chart
center_x <- 0.5
center_y <- 0.5
plot.new()
# draw version pie chart first
version_chart <-
floating.pie(
xpos = center_x,
ypos = center_y,
x = version_data$size,
radius = 0.35,
border = "white",
col = version_colors
)
# add labels for version pie chart
pie.labels(
x = center_x,
y = center_y,
angles = version_chart,
labels = version_labels,
radius = 0.38,
bg = NULL,
cex = 0.55,
font = 2,
col = "gray40"
)
# overlay browser pie chart
browser_chart <-
floating.pie(
xpos = center_x,
ypos = center_y,
x = browser_data$x,
radius = 0.25,
border = "white",
col = browser_colors
)
paste(browser_data$browser,browser_data$x, sep = " ")
# add labels for browser pie chart
pie.labels(
x = center_x,
y = center_y,
angles = browser_chart,
labels = paste(browser_data$browser,paste(browser_data$x,"%"), sep = "\n"),
radius = 0.125,
bg = NULL,
cex = 0.65,
font = 2,
col = "black"
)
title(main="Variance decomposition for fixed effects",line=-2)
title(main="Variance decomposition for fixed effects",line=-5)
# Convert the estimated random effects into a dataframe that can be fed to ggplot
mu_spatioLevel_days <- as.data.frame(rep_random[rownames(rep_random)=="mu_spatioLevel_days",])
rownames(mu_spatioLevel_days) <-  unique(tmb_scale_pweek$spatioLevelfactor)
colnames(mu_spatioLevel_days) <- c("Estimate", "SE")
mu_spatioLevel_days$Country <- rownames(mu_spatioLevel_days)
beta_days_fixed <- rep_fixed["beta_days","Estimate"]
random_effects <- mu_spatioLevel_days %>%
mutate(Estimate = Estimate + beta_days_fixed) %>%
arrange(Estimate)  %>%
mutate(Country = as.character(Country))
level_order <- random_effects$Country #this vector is used for reorder the countries according to the effect sizes
#ggplot
plot_days<- ggplot(random_effects, aes(x=factor(Country,level = level_order), Estimate)) +
geom_pointrange(aes(ymin = Estimate - 1.96*SE, ymax = Estimate + 1.96*SE),color="darkblue") +
geom_hline(yintercept=0,color = "red") + coord_flip() +
theme_bw(base_size=10)+
labs(y = "Random effects of days (the number of days since first confirmed case)", x=NULL)+
theme(
axis.title.x = element_text(color = "black", size = 12, face = "bold"),
axis.title.y = element_text(color = "black", size = 12, face = "bold")
)
plot_days
plot_days<- ggplot(random_effects, aes(x=factor(Country,level = level_order), Estimate)) +
geom_pointrange(aes(ymin = Estimate - 1.96*SE, ymax = Estimate + 1.96*SE),color="darkblue") +
geom_hline(yintercept=0,color = "red") + coord_flip() +
theme_bw(base_size=10)+
labs(y = "Random effects of days (the number of days since first confirmed case)", x="Country")+
theme(
axis.title.x = element_text(color = "black", size = 12, face = "bold"),
axis.title.y = element_text(color = "black", size = 12, face = "bold")
)
plot_days
